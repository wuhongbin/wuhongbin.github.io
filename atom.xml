<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>时光如水の总是无言</title>
  
  <subtitle>wuhongbin&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wuhongbin.github.io/"/>
  <updated>2020-08-09T09:57:20.488Z</updated>
  <id>https://wuhongbin.github.io/</id>
  
  <author>
    <name>时光如水の总是无言</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>查找之B+树 详细总结</title>
    <link href="https://wuhongbin.github.io/2020/06/14/%E6%9F%A5%E6%89%BE%E4%B9%8BB+%E6%A0%91%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/"/>
    <id>https://wuhongbin.github.io/2020/06/14/%E6%9F%A5%E6%89%BE%E4%B9%8BB+%E6%A0%91%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-14T07:15:50.000Z</published>
    <updated>2020-08-09T09:57:20.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h1><p>一棵m阶B+树满足如下特性:  </p><ol><li>每个分支结点最多有m棵子树子结点)</li><li>若根结点不是终端结点,则至少有两棵子树</li><li>除根结点外的所有非叶结点至少有 (m/2)取上界 棵子树, <strong>子树和关键字个数相等</strong></li><li>所有叶结点包含全部关键字及指向相应记录的指针,叶结点中将关键字按大小顺序排列, 并且相邻结点按大小顺序连接起来</li><li>所有分支结点(可视为索引的索引)中仅包含他的各个子结点(下一级索引块)中关键字的最大值及指向其子结点的指针</li></ol><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/09/aT7t8s.png" alt=""></p><h1 id="B-树-VS-B树"><a href="#B-树-VS-B树" class="headerlink" title="B+树 VS B树"></a>B+树 VS B树</h1><ol><li><p>在B+树中, 具有η个关键字的结点值含有n棵子树,即每个关键字对应一棵子树</p><p>在B树中, 具有n个关键字的结点含有n+1棵子树</p></li><li><p>在B+树中,叶结点包含信息, 所有非叶结点仅起索引作用, 非叶结点中的毎个索引项只含有对应子树的最大关键字和指向该子树关键字的指针, 不 含有该关键字对应记录的存储地址</p></li><li><p>在B+树中, 叶结点包含全部关键字,即在非叶结点中出现的关键字也会 出现在叶结点中棵子树</p><p>在B树中,叶结点包含的关键字和其他结点包含的关键字是不重复的</p></li></ol><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/09/aTHLY4.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本定义&quot;&gt;&lt;a href=&quot;#基本定义&quot; class=&quot;headerlink&quot; title=&quot;基本定义&quot;&gt;&lt;/a&gt;基本定义&lt;/h1&gt;&lt;p&gt;一棵m阶B+树满足如下特性:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个分支结点最多有m棵子树子结点)&lt;/li&gt;
&lt;li&gt;若根结点不
      
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://wuhongbin.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
      <category term="查找" scheme="https://wuhongbin.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%9F%A5%E6%89%BE/"/>
    
    
      <category term="多路平衡查找树" scheme="https://wuhongbin.github.io/tags/%E5%A4%9A%E8%B7%AF%E5%B9%B3%E8%A1%A1%E6%9F%A5%E6%89%BE%E6%A0%91/"/>
    
      <category term="B+树" scheme="https://wuhongbin.github.io/tags/B-%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>查找之B树 详细总结</title>
    <link href="https://wuhongbin.github.io/2020/06/14/%E6%9F%A5%E6%89%BE%E4%B9%8BB%E6%A0%91%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/"/>
    <id>https://wuhongbin.github.io/2020/06/14/%E6%9F%A5%E6%89%BE%E4%B9%8BB%E6%A0%91%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-14T02:15:50.000Z</published>
    <updated>2020-08-09T09:39:22.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h1><p><strong>B树</strong> 又称多路平衡查找树，B树中所有结点的 <strong>孩子结点数</strong> 的最大值称为B树的阶。</p><blockquote><p>一棵m阶B树或为空树，或为满足如下特性的m叉树：</p><ol><li><p>树中每个结点至多有m棵子树（即至多含有m-1个关键字）</p></li><li><p>若根结点不是终端结点，则至少有两棵子树</p></li><li><p>除根结点外的所有非叶结点至少有 <strong>m/2 (取上界)</strong>  棵子树（即 *<em>m/2 (取上界) *</em>- 1 个关键字）</p></li><li><p>非叶结点的结构：</p><p>   <img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/09/ao7tfA.png" alt="">                     </p></li><li><p>所有的叶结点都出现在同一层次上，并不带任何信息</p></li></ol></blockquote><h1 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h1><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/09/aoHuNQ.png" alt=""></p><p>首先，这棵B树中 <strong>孩子结点数的最大值是3</strong>，所以这棵树的 <strong>阶为3</strong>，即为 <strong>3阶B树</strong></p><ol><li><p>由图中可看出，树中每个结点至多有3棵子树（即至多含有2个关键字）</p></li><li><p>例如 10，15，20 结点，不是终端结点，至少有两棵子树</p></li><li><p>m/2 (取上界)  = 3/2(取上界) = <strong>2</strong>，m/2 (取上界) - 1  =  3/2(取上界) - 1 = <strong>1</strong>，满足要求</p></li><li><p>Ki :  18 &lt; 33,   Pi 和 Pi-1 ：12 &lt; 18 , 48 &gt; 33 ,  满足要求</p></li><li><p>如图，最下面的叶结点均在一层，且不带任何信息</p></li></ol><h1 id="问题探究"><a href="#问题探究" class="headerlink" title="问题探究"></a>问题探究</h1><blockquote><p><strong>n个关键字,阶数为m,高度为h的B ? ? ?</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/09/aoxTA0.png" alt=""></p><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/09/aTFEJ1.png" alt=""></p><blockquote><ol><li>在B树中找结点             <strong>磁盘</strong></li><li>在结点中找关键字        <strong>内存</strong></li></ol></blockquote><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><ol><li><p><strong>定位</strong></p><p>查找插入该关键字的位置，即最底层中的某个非叶子结点（规定一定是插入在最底层的某个非叶子结点内）</p></li><li><p><strong>插入</strong><br>若插入后，不破会m阶B树的定义，即插入后结点关键字个数在属于区间[m/2 -1, m-1]，则直接插入；<br>若插入后，关键字数量大于m-1，则对插入后的结点进行分裂操作；<br>分裂：<br>插入后的结点中间位置（[m/2]）关键字并入父结点中，<br>中间结点左侧结点留在原先的结点中，右侧结点放入新的节点中，<br>若并入父节点后，父结点关键字数量超出范围，继续想上分裂，直到符合要求为止。</p></li></ol><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/09/aT27X4.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/09/aT2bnJ.png" alt=""></p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/09/aTRm38.png" alt=""></p><h3 id="终端节点删除"><a href="#终端节点删除" class="headerlink" title="终端节点删除"></a>终端节点删除</h3><ol><li><strong>直接删除</strong></li></ol><p>​    若被删除关键字所在结点关键字总数 &gt;「m/2 ] - 1 , 表明删除后仍满足B树定义, 直接删除 </p><ol start="2"><li><strong>兄弟够借</strong></li></ol><p>​    若被删除关键字所在结点关键字总数 =「m/2 ] - 1 ,且与此结点邻近的兄弟结点的关键字个数&gt;「m/2] , 则需要从兄弟结点借一个关键字,此过程需要调整该结点、双亲结点和兄弟结点的关键字</p><ol start="3"><li><strong>兄弟不够借</strong></li></ol><p>​    若被删除关键字所在结点关键字总数=「m/2] - 1, 且与此结点邻近的兄弟结点的关键字个数=「m/2] -1, 则删除关键字, 并与一个不够借的兄弟结点和双亲结点中两兄弟子树中间的关键字合并。合并后若双亲结点因减少一个结点导致不符合定义, 则继续执行2、3步骤 。</p><blockquote><p><strong>下面请仔细观察图（想着上方步骤）</strong></p></blockquote><blockquote><p><strong>直接删除</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/09/aThfrF.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/09/aThhb4.png" alt=""></p><blockquote><p><strong>兄弟够借</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/09/aThWKU.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/09/aTh5VJ.png" alt=""></p><blockquote><p><strong>兄弟不够借</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/09/aT4Eqg.png" alt=""></p><h3 id="非终端节点删除"><a href="#非终端节点删除" class="headerlink" title="非终端节点删除"></a>非终端节点删除</h3><ol><li>若小于k的子树中关键字个数 &gt; [m/2] -1, 则找出k的前驱值k,并用k来取代k,再递归地删除k即可。  </li><li>若大于k的子树中关键字个数 &gt; [m/2] -1, 则找出k的后继值k,并用k来取代k,再递归地删除k即可。    </li><li>若前后两子树关键字个数均为「m/2] -1, 则直接两个子结点合并,  然后删除k即可。</li></ol><blockquote><p><strong>前驱值：</strong>结点左边子树的最右边的结点的关键字</p><p><strong>后驱值：</strong>结点右边子树的最左边的结点的关键字</p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/09/aTTkfs.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/09/aTTZ60.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/09/aTTEpn.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本定义&quot;&gt;&lt;a href=&quot;#基本定义&quot; class=&quot;headerlink&quot; title=&quot;基本定义&quot;&gt;&lt;/a&gt;基本定义&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;B树&lt;/strong&gt; 又称多路平衡查找树，B树中所有结点的 &lt;strong&gt;孩子结点数&lt;/strong&gt; 
      
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://wuhongbin.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
      <category term="查找" scheme="https://wuhongbin.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%9F%A5%E6%89%BE/"/>
    
    
      <category term="B树" scheme="https://wuhongbin.github.io/tags/B%E6%A0%91/"/>
    
      <category term="多路平衡查找树" scheme="https://wuhongbin.github.io/tags/%E5%A4%9A%E8%B7%AF%E5%B9%B3%E8%A1%A1%E6%9F%A5%E6%89%BE%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>查找之平衡二叉树 详细总结</title>
    <link href="https://wuhongbin.github.io/2020/06/13/%E6%9F%A5%E6%89%BE%E4%B9%8B%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/"/>
    <id>https://wuhongbin.github.io/2020/06/13/%E6%9F%A5%E6%89%BE%E4%B9%8B%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-13T11:15:50.000Z</published>
    <updated>2020-08-08T11:11:04.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p><strong>AVL</strong>, 任意结点的平衡因子的 <strong>绝对值不超过一</strong>。<strong>平衡二叉树是一种二叉排序树</strong><br><strong>平衡因子：</strong>    左子树高度 - 右子树高度</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/a50559.png" alt=""></p><blockquote><p><strong>根节点平衡因子是2，不是平衡二叉树</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/a504UJ.png" alt=""></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><blockquote><p><strong>高度为h的最小平衡二叉树的结点数Nh</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/a5BzeU.png" alt=""></p><h1 id="平衡二叉树的判断"><a href="#平衡二叉树的判断" class="headerlink" title="平衡二叉树的判断"></a>平衡二叉树的判断</h1><blockquote><p><strong>利用递归的后序遍历过程:</strong></p><ol><li><p>判断左子树是一棵平衡二叉树  </p></li><li><p>判断右子树是一棵平衡二叉树 </p></li><li><p>判断以该结点为根的二叉树为平衡二叉树</p></li></ol></blockquote><blockquote><p><strong>判断条件</strong></p><p>若左子树和右子树均为平衡二叉树且左子树与右子树高度差的绝对值小于等于1,  则平衡。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/a5rJ3R.png" alt=""></p><blockquote><p>b 代表平衡性，1表示平衡，0表示不平衡</p><p>h 代表树的高度</p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Judge_AVL</span><span class="params">(BiTree bt, <span class="keyword">int</span> &amp;balance, <span class="keyword">int</span> &amp;h)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bl = <span class="number">0</span>, br = <span class="number">0</span>, hl = <span class="number">0</span>, hr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(bt == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        h = <span class="number">0</span>;</span><br><span class="line">        balance = <span class="number">1</span>；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(bt-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; bt-&gt;rchild == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        h = <span class="number">1</span>;</span><br><span class="line">        balance = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Judge_AVL(bt-&gt;lchild, bl, hl);</span><br><span class="line">        Judge_AVL(bt-&gt;rchild, br, hr);</span><br><span class="line">        <span class="keyword">if</span>(hl &gt; hr)</span><br><span class="line">            h = hl + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            h = hr + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(h1 - hr) &lt; <span class="number">2</span> &amp;&amp; bl == <span class="number">1</span> &amp;&amp; br == <span class="number">1</span>)</span><br><span class="line">            balance = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            balance = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h1><blockquote><p><strong>先插入后调整</strong></p><p>每次调整 <strong>最小不平衡子树</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/aI3dX9.png" alt=""></p><h2 id="LL平衡旋转-右单旋转"><a href="#LL平衡旋转-右单旋转" class="headerlink" title="LL平衡旋转(右单旋转)"></a>LL平衡旋转(右单旋转)</h2><p>*<em>原因: *</em> 在结点A的左孩子的左子树上插入了新结点 </p><p>*<em>调整方法: *</em> 右旋操作: 将A的左孩子B代替A,将A结点称为B的右子树根结点,而B的原右子树则作为A的左子树</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/aIGHyQ.png" alt=""></p><h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/aIJq1O.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/aIJLcD.png" alt=""></p><h2 id="RR平衡旋转-左单旋转"><a href="#RR平衡旋转-左单旋转" class="headerlink" title="RR平衡旋转(左单旋转)"></a>RR平衡旋转(左单旋转)</h2><p><strong>原因：</strong>在结点A的右孩子的右子树上插入了新结点  </p><p><strong>调整方法：</strong> 左旋操作: 将A的右孩子B代替A, 将A结点称为B的左子树 根结点, 而B的原左子树则作为A的右子树。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/aItiI1.png" alt=""></p><h3 id="例-1"><a href="#例-1" class="headerlink" title="例"></a>例</h3><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/aItCZ9.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/aItPaR.png" alt=""></p><h2 id="LR平衡旋转-先左后右双旋转"><a href="#LR平衡旋转-先左后右双旋转" class="headerlink" title="LR平衡旋转(先左后右双旋转)"></a>LR平衡旋转(先左后右双旋转)</h2><p><strong>原因：</strong>在结点A的左孩子的右子树上插入了新结点<br><strong>调整方法：</strong>先左旋后右旋操作：将A的左孩子B的右孩子结点C代替B，然后再将C结点向上代替A的位置。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/aINC6S.png" alt=""></p><h3 id="例-2"><a href="#例-2" class="headerlink" title="例"></a>例</h3><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/aIN9l8.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/aINpSf.png" alt=""></p><h2 id="RL平衡旋转-先右后左旋转"><a href="#RL平衡旋转-先右后左旋转" class="headerlink" title="RL平衡旋转(先右后左旋转)"></a>RL平衡旋转(先右后左旋转)</h2><p><strong>原因：</strong>在结点A的右孩子的左子树上插入了新结点  </p><p><strong>调整方法：</strong> 先右旋后左旋操作:将A的右孩子B的左孩子结点C代替B,  然后再将C结点向上代替A的位置。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/aINTNn.png" alt=""></p><h3 id="例-3"><a href="#例-3" class="headerlink" title="例"></a>例</h3><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/aINoAs.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/aIN57j.png" alt=""></p><blockquote><p><strong>再次提醒：以上4种方式的前提是 最小不平衡子树</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;AVL&lt;/strong&gt;, 任意结点的平衡因子的 &lt;strong&gt;绝对值不超过一&lt;/strong&gt;。&lt;strong&gt;平衡二叉
      
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://wuhongbin.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
      <category term="查找" scheme="https://wuhongbin.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%9F%A5%E6%89%BE/"/>
    
    
      <category term="平衡二叉树" scheme="https://wuhongbin.github.io/tags/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>查找之二叉排序树 详细总结</title>
    <link href="https://wuhongbin.github.io/2020/06/13/%E6%9F%A5%E6%89%BE%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/"/>
    <id>https://wuhongbin.github.io/2020/06/13/%E6%9F%A5%E6%89%BE%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-13T09:15:50.000Z</published>
    <updated>2020-08-08T11:12:00.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>二叉排序树 <strong>BST</strong>，也称 <strong>二又查找树</strong> 。<br>二叉排序树或者为空树，或者为非空树，当为非空树时有如下特点：</p><ol><li><p>若左子树非空，则左子树上所有结点关键字值 <strong>均小于</strong> 根结点的关键字。</p></li><li><p>若右子树排空，则右子树上所有结点关键字值 <strong>均大于</strong> 根结点的关键字。</p></li><li><p>左、右子树本身也分别是一棵二叉排序树。</p></li></ol><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/a4zcO1.png" alt=""></p><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>二叉树非空时，查找根结点，若相等则查找成功；</p><p>若不等，则当小于根结点值时，查找左子树；当大于根结点的值时，查找右子树。</p><p>当查找到叶节点仍没查找到相应的值，则查找失败。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/a5pIsA.png" alt=""></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BSTNode *<span class="title">BST_search</span><span class="params">(BiTree T, Elemrype key, BSTNode * &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//传入三个参数  二叉排序树， 查找值， 记录当前结点的双亲系结点指针</span></span><br><span class="line">    p = <span class="literal">NULL</span>；</span><br><span class="line">    <span class="keyword">while</span>(T != <span class="literal">NULL</span> &amp;&amp; key != T-&gt;data)</span><br><span class="line">    &#123;</span><br><span class="line">        p = T;</span><br><span class="line">        <span class="keyword">if</span>(key &lt; T-&gt;data)</span><br><span class="line">           T = T-&gt;lchild;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">           T = T-&gt;rchild;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> T;<span class="comment">//返回查找结点的指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度为 O (h) ，h为二叉排序树的高度</p></blockquote><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>若二叉排序树为空, 则直接插入结点;</p><p>若二叉排序树非空, 当值小于根结点时,插入左子树; 当值大于根结点时, 插入右子树;</p><p>当值等于根结点时不进行插入。</p><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BST_Insert</span><span class="params">(BiTree &amp;T, KeyType k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)   <span class="comment">//为空时</span></span><br><span class="line">    &#123;</span><br><span class="line">        T = (BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BSTNode));</span><br><span class="line">        T-&gt;key = k;</span><br><span class="line">        T-&gt;lchild = T-&gt;rchlid = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(k = T-&gt;key)    <span class="comment">//等于时</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(k &lt; T-&gt;key)   <span class="comment">//非空小于</span></span><br><span class="line">        <span class="keyword">return</span> BST_Insert(T-&gt;lchild, k);</span><br><span class="line">    <span class="keyword">else</span>   <span class="comment">//非空大于</span></span><br><span class="line">        <span class="keyword">return</span> BST_Insert(T-&gt;rchild, k);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造二排序树"><a href="#构造二排序树" class="headerlink" title="构造二排序树"></a>构造二排序树</h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>读入一个元素并建立结点, 若二叉树为空将其作为根结点；</p><p>若二叉排序树非空, 当值小于根结点时,插入左子树; 当值大于根结点时,插入右子树;</p><p>当值等于根结点时不进行插入。</p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Create_BST</span><span class="params">(BiTree &amp;T, KeyType str[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     T = <span class="literal">NULL</span>;</span><br><span class="line">     <span class="keyword">int</span> i =<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">while</span>(i &lt; n)</span><br><span class="line">     &#123;</span><br><span class="line">         BST_Insert(T, str[i]);</span><br><span class="line">         i++;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/a5e1Hg.png" alt=""></p><blockquote><p><strong>如果元素的值相同，但是顺序不同，构造出的二叉排序树也是不同的</strong></p></blockquote><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><blockquote><p><strong>若被删除结点z是叶结点, 则直接删除;</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/a5mVqU.png" alt=""></p><blockquote><p><strong>若被删除结点z只有一棵子树,则让z的子树成为z父结点的子树, 代替z结点。</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/a5mQR1.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/a5mlxx.png" alt=""></p><blockquote><p><strong>若被删除结点z有两棵子树,则让z的中序序列直接后继代替z,并删去直接后继结点。</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/a5mrsf.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/a5mDQP.png" alt=""></p><h1 id="问题探究"><a href="#问题探究" class="headerlink" title="问题探究"></a>问题探究</h1><blockquote><p><strong>思考：在二叉排序树中删除并插入某节点, 得到的二叉排序树是否与原来相同？？？</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/a5n4tH.png" alt=""></p><p><strong>结论：可能相同也可能不同</strong></p><h1 id="查找效率"><a href="#查找效率" class="headerlink" title="查找效率"></a>查找效率</h1><p><strong>平均查找长度（ASL）取决于树的高度</strong></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/08/a5un3R.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;p&gt;二叉排序树 &lt;strong&gt;BST&lt;/strong&gt;，也称 &lt;strong&gt;二又查找树&lt;/strong&gt; 。&lt;br&gt;二叉排序树或者为空树，或
      
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://wuhongbin.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
      <category term="查找" scheme="https://wuhongbin.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%9F%A5%E6%89%BE/"/>
    
    
      <category term="二叉排序树" scheme="https://wuhongbin.github.io/tags/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>查找之分块查找 详细总结</title>
    <link href="https://wuhongbin.github.io/2020/06/12/%E6%9F%A5%E6%89%BE%E4%B9%8B%E5%88%86%E5%9D%97%E6%9F%A5%E6%89%BE%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/"/>
    <id>https://wuhongbin.github.io/2020/06/12/%E6%9F%A5%E6%89%BE%E4%B9%8B%E5%88%86%E5%9D%97%E6%9F%A5%E6%89%BE%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-12T07:15:50.000Z</published>
    <updated>2020-07-31T10:32:06.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p><strong>分块查找：</strong>又称索引顺序查找，它吸取了顺序查找和折半查找各自的优点，既有动态结构，又适于快速查找。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/31/al8Cfe.png" alt=""></p><h1 id="如何分块"><a href="#如何分块" class="headerlink" title="如何分块"></a>如何分块</h1><ol><li>将查找表分为若干子块。块内的元素可以无序，但块间是有序的，即对于所有块有第i块的最大关键字小于第i+1块的所有记录的关键字。</li><li>建立索引表，索引表中的每个元素含有各块的最大关键字和各块中的第一个元素的地址，索引表按关键字有序排列。</li></ol><blockquote><p><strong>块内无序块间有序</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/31/alGHM9.png" alt=""></p><h1 id="如何查找"><a href="#如何查找" class="headerlink" title="如何查找"></a>如何查找</h1><ol><li>在索引表中确定待查记录所在的块,可以 <strong>顺序查找或折半查找</strong> 索引表。  </li><li>在块内进行 <strong>顺序查找</strong></li></ol><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/31/alGHM9.png" alt=""></p><p>分块查找的平均查找长度为 <strong>索引查找(LI)和块内查找(LS)之和</strong>。  </p><p>设长度为n的查找表均匀分为b块,每块有s个记录</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/31/alYxjH.png" alt=""></p><blockquote><p>若块内和块间均采用 <strong>顺序查找</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/31/altpDA.png" alt=""></p><blockquote><p>若块内采用顺序查找，块间均采用 <strong>折半查找</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/31/altSud.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;分块查找：&lt;/strong&gt;又称索引顺序查找，它吸取了顺序查找和折半查找各自的优点，既有动态结构，又适于快速查找。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://wuhongbin.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
      <category term="查找" scheme="https://wuhongbin.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%9F%A5%E6%89%BE/"/>
    
    
      <category term="分块查找" scheme="https://wuhongbin.github.io/tags/%E5%88%86%E5%9D%97%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>查找之折半查找 详细总结</title>
    <link href="https://wuhongbin.github.io/2020/06/11/%E6%9F%A5%E6%89%BE%E4%B9%8B%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/"/>
    <id>https://wuhongbin.github.io/2020/06/11/%E6%9F%A5%E6%89%BE%E4%B9%8B%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-11T11:15:50.000Z</published>
    <updated>2020-07-31T08:27:47.429Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p><strong>折半查找：</strong>又称二分查找，仅适用于 <strong>有序的顺序表</strong></p><h1 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h1><ol><li><p>首先将给定值key与表中中间位置元素的关键字比较,  </p></li><li><p>若相等,则返回该元素的位置;  </p></li><li><p>若不等,则在前半部分或者是后半部分进行查找。 </p></li></ol><blockquote><p>查找序列升序时,  </p><p>若key小于中间元素,则查找前半部分  </p><p>若key大于中间元素,则查找后半部分。  </p></blockquote><ol start="4"><li>重复该过程,直到找到查找的元素为止;或查找失败。</li></ol><h1 id="参考代码实现"><a href="#参考代码实现" class="headerlink" title="参考代码实现"></a>参考代码实现</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Binary_Search</span><span class="params">(SeqList L, ElemType key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> low=<span class="number">0</span>, high=L.TableLen<span class="number">-1</span>, mid;</span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high)</span><br><span class="line">    &#123;</span><br><span class="line">    mid = (low + high)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(L.elem[mid] == key)  </span><br><span class="line">    <span class="keyword">return</span> mid;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L.elem[mid] &gt; key)</span><br><span class="line">        high = mid - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">            Low = mid + <span class="number">1</span>;        </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>折半查找的时间复杂度为 O(log2n)</strong></p></blockquote><h1 id="判定树"><a href="#判定树" class="headerlink" title="判定树"></a>判定树</h1><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/31/aQ0Hc8.png" alt=""></p><blockquote><p>若该判定树是 <strong>满二叉树</strong> 时，</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/31/aQ0xNn.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/31/aQBkB4.png" alt=""></p></blockquote><blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/31/aQB3HH.png" alt=""></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;折半查找：&lt;/strong&gt;又称二分查找，仅适用于 &lt;strong&gt;有序的顺序表&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;
      
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://wuhongbin.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
      <category term="查找" scheme="https://wuhongbin.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%9F%A5%E6%89%BE/"/>
    
    
      <category term="折半查找" scheme="https://wuhongbin.github.io/tags/%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>查找之顺序查找 详细总结</title>
    <link href="https://wuhongbin.github.io/2020/06/11/%E6%9F%A5%E6%89%BE%E4%B9%8B%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/"/>
    <id>https://wuhongbin.github.io/2020/06/11/%E6%9F%A5%E6%89%BE%E4%B9%8B%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-11T10:15:50.000Z</published>
    <updated>2020-07-31T08:27:36.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p><strong>顺序查找：</strong>又称线性查找，主要用于在<strong>线性表</strong>中进行查找。</p><h1 id="无序线性表的顺序查找"><a href="#无序线性表的顺序查找" class="headerlink" title="无序线性表的顺序查找"></a>无序线性表的顺序查找</h1><h2 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h2><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/31/aQMvkQ.png" alt=""></p><blockquote><p>对无序线性表进行顺序查找，查找失败时要 <strong>遍历整个线性表</strong></p></blockquote><h2 id="参考代码实现"><a href="#参考代码实现" class="headerlink" title="参考代码实现"></a>参考代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">        ElemType *elem;</span><br><span class="line">        <span class="keyword">int</span> TableLen;</span><br><span class="line">&#125;SSTable;<span class="comment">//查找表</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search_Seg</span><span class="params">(SStable ST,ElemType key)</span></span>&#123;</span><br><span class="line">        ST.elem[<span class="number">0</span>] = key; <span class="comment">//哨兵</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = ST.Tablelen; ST.elem[i] != key; i--);</span><br><span class="line">        <span class="keyword">return</span> i; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>哨兵作用：</strong> 查找失败返回哨兵下标即0，查找成功返回查找到的元素下标。如果没有哨兵，则需要加一个if判断，是否查找到指定元素。<strong>使用哨兵可以精简代码量。</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/31/aQ1msx.png" alt=""></p><h1 id="有序线性表的顺序查找"><a href="#有序线性表的顺序查找" class="headerlink" title="有序线性表的顺序查找"></a>有序线性表的顺序查找</h1><h2 id="实例分析-1"><a href="#实例分析-1" class="headerlink" title="实例分析"></a>实例分析</h2><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/31/aQ1aef.png" alt=""></p><blockquote><p>对关键字有序线性表进行顺序查找，查找失败时 <strong>不一定要遍历整个线性表</strong></p></blockquote><h2 id="判定树"><a href="#判定树" class="headerlink" title="判定树"></a>判定树</h2><p><strong>判定树：</strong> 描述查找过程的二叉排序树</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/31/aQG5tS.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/31/aQGbXn.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;顺序查找：&lt;/strong&gt;又称线性查找，主要用于在&lt;strong&gt;线性表&lt;/strong&gt;中进行查找。&lt;/p&gt;
&lt;h1 i
      
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://wuhongbin.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
      <category term="查找" scheme="https://wuhongbin.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%9F%A5%E6%89%BE/"/>
    
    
      <category term="顺序查找" scheme="https://wuhongbin.github.io/tags/%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>查找的基本概念 详细总结</title>
    <link href="https://wuhongbin.github.io/2020/06/11/%E6%9F%A5%E6%89%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/"/>
    <id>https://wuhongbin.github.io/2020/06/11/%E6%9F%A5%E6%89%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-11T08:15:43.000Z</published>
    <updated>2020-07-31T04:58:51.837Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/31/aQVP9f.png" alt=""></p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><blockquote><p><strong>查找：</strong>在数据集合中寻找满足某种条件的数据元素的过程。 </p><p>查找结果分为 <strong>查找成功</strong> 和 <strong>查找失败</strong>。</p></blockquote><blockquote><p>*<em>查找表:  *</em>用于查找的数据集合, 由同一种数据类型(或记录)的组成, 可以是一个数组或链表等数据类型  </p><p>操作:    </p><ol><li>检索满足条件的某个特定的数据元素的各种属性</li><li>查询某个特定的数据元素是否在查找表中    </li><li>在查找表中插入一个数据元素  </li><li>从查找表中删除一个数据元素</li></ol><p>操作1和2合起来称作 <strong>静态查找表</strong> , 全部操作合起来称作 <strong>动态查找表</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/31/aQAdd1.png" alt=""></p><blockquote><p>*<em>关键字:  *</em> 数据元素中唯一标识该元素的某个数据项的值, 使用基于关键字的查找, 查找结果应该是唯一的。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/31/aQAwIx.png" alt=""></p><blockquote><p><strong>平均查找长度：</strong>  查找时,关键字比较次数的平均值:</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/31/aQkcEq.png" alt=""></p><p>一般用于衡量一个查找算法的<strong>查找效率</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;总览&quot;&gt;&lt;a href=&quot;#总览&quot; class=&quot;headerlink&quot; title=&quot;总览&quot;&gt;&lt;/a&gt;总览&lt;/h1&gt;&lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-src=&quot;https://s1.ax1x.com/2020/07/31/
      
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://wuhongbin.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
      <category term="查找" scheme="https://wuhongbin.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%9F%A5%E6%89%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>图的应用之关键路径 详细总结</title>
    <link href="https://wuhongbin.github.io/2020/06/10/%E5%9B%BE%E7%9A%84%E5%BA%94%E7%94%A8%E4%B9%8B%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/"/>
    <id>https://wuhongbin.github.io/2020/06/10/%E5%9B%BE%E7%9A%84%E5%BA%94%E7%94%A8%E4%B9%8B%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-10T02:15:43.000Z</published>
    <updated>2020-07-30T10:37:55.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h1><p><strong>AOE网：</strong>在有向带权图中, 以顶点表示事件, 以有向边表示活动, 以边上权值表示完成该活动的开销(如完成活动所需要的时间), 则称这种有向图为用边 表示活动的网络, 简称 <strong>AOE网</strong> 。</p><p><strong>源点：</strong>没有入边的顶点（有且只有一个）</p><p><strong>汇点：</strong>没有出边的顶点（有且只有一个）</p><p><strong>关键路径：</strong>从原点到汇点最大路径长度的路径称为 <strong>关键路径</strong>, 键路径上的活动为 <strong>关键活动</strong></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/30/anvC1f.png" alt=""></p><h1 id="基本计算"><a href="#基本计算" class="headerlink" title="基本计算"></a>基本计算</h1><blockquote><p><strong>事件Vk的最早发生时间 Ve(k)</strong></p><p>利用事件的入边，取最大值</p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/30/anxsMT.png" alt=""></p><blockquote><p><strong>事件Vk的最迟发生时间 Vl(k)</strong></p><p>利用事件的出边，取最小值</p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/30/aupgeS.png" alt=""></p><blockquote><p><strong>活动ai的最早开始时间e(i)</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/30/auEvMd.png" alt=""></p><blockquote><p><strong>活动ai的最迟开始时间l(i)</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/30/auV3z4.png" alt=""></p><blockquote><p><strong>活动ai的差额d(i) = l(i) - e(i)</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/30/auVbmn.png" alt=""></p><h1 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h1><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/30/auea8O.png" alt=""></p><blockquote><p>当网中关键路径 <strong>不唯一</strong> 时，只有加快的关键活动或关键活动组合包括在 <strong>所有的关键路径</strong> 上才能缩短工期。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本定义&quot;&gt;&lt;a href=&quot;#基本定义&quot; class=&quot;headerlink&quot; title=&quot;基本定义&quot;&gt;&lt;/a&gt;基本定义&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;AOE网：&lt;/strong&gt;在有向带权图中, 以顶点表示事件, 以有向边表示活动, 以边上权值表示完成该活动
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://wuhongbin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图" scheme="https://wuhongbin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    
    
      <category term="关键路径" scheme="https://wuhongbin.github.io/tags/%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>图的应用之拓扑排序 详细总结</title>
    <link href="https://wuhongbin.github.io/2020/06/09/%E5%9B%BE%E7%9A%84%E5%BA%94%E7%94%A8%E4%B9%8B%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/"/>
    <id>https://wuhongbin.github.io/2020/06/09/%E5%9B%BE%E7%9A%84%E5%BA%94%E7%94%A8%E4%B9%8B%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-09T06:15:43.000Z</published>
    <updated>2020-07-30T10:38:25.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><blockquote><p><strong>有向无环图：</strong>不存在环的有向图, 简称<strong>DAG图</strong>。    </p><p><strong>AOV网：</strong>若用一个DAG图表示一个工程,其顶点表示活动, 用 有向边&lt;vi, vj&gt;表示活动vi先于活动vj进行的传递关系,则将这种DAG称为<strong>顶点表示活动网络</strong>, 记为<strong>AOV网</strong>。 </p></blockquote><p><strong>拓扑排序：</strong>对DAG所有顶点的一种排序, 使若存在一条从顶点A 到顶点B的路径,在排序中B排在A的后面。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/29/aeHxTf.png" alt=""></p><h1 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h1><ol><li>从DAG图中选择一个没有前驱的顶点并输出</li><li>从图中删除该顶点和所有以它为起点的有向边</li><li>重复1、2 ，直到当前的DAG图为空或当前图中不存在无前驱的顶点为止。后一种情况说明图中 <strong>有环</strong>。</li></ol><h1 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h1><h2 id="例1-（无环）"><a href="#例1-（无环）" class="headerlink" title="例1 （无环）"></a>例1 （无环）</h2><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/29/aeL9Mj.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/29/aeLSzQ.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/29/aeLCss.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/29/aeqzRg.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/29/aeLPLn.png" alt=""></p><h2 id="例2（有环）"><a href="#例2（有环）" class="headerlink" title="例2（有环）"></a>例2（有环）</h2><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/29/aeOptK.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/29/aeO9fO.png" alt=""></p><blockquote><p><strong>算法结束时没有访问所有顶点,则存在以剩下顶点组成的环。</strong></p></blockquote><h2 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h2><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/29/aeXi5V.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/29/aeXPU0.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/29/aeXkCT.png" alt=""></p><blockquote><p><strong>拓扑排序的结果不一定唯一。</strong></p></blockquote><h1 id="参考代码实现"><a href="#参考代码实现" class="headerlink" title="参考代码实现"></a>参考代码实现</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//温馨提示：以下代码只看思路，不必深究细节</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">TopologicalSort</span><span class="params">(Graph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Initstack(S);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(indegree[i] == <span class="number">0</span>) <span class="comment">//入度为0</span></span><br><span class="line">            Push(S,i);<span class="comment">//入栈</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//记录统计输出顶点的个数</span></span><br><span class="line">    <span class="keyword">int</span> V;</span><br><span class="line">    <span class="keyword">while</span>(!isEmpty(S))<span class="comment">//空：图中不存在入度为0的节点   非空：进入循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        Pop(S, i); <span class="comment">//弹出栈顶元素，弹出一入度为0的顶点</span></span><br><span class="line">        <span class="built_in">print</span>[count++] = i;<span class="comment">//保存当前出栈的入度为0的节点下标  </span></span><br><span class="line">        <span class="keyword">for</span>(p=G.Vertices[i].firstarc; p; p=p-&gt;nextarc)<span class="comment">//遍历边表</span></span><br><span class="line">        &#123;</span><br><span class="line">            v = p-&gt;adjvex;</span><br><span class="line">            <span class="keyword">if</span>(!(--indegree[v]))<span class="comment">//若-1后，入度为0，则入栈</span></span><br><span class="line">                Push(S, v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(count &lt; G.vexnum) <span class="comment">//为真说明图中有环</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//排序失败</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//排序成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度为 <strong>O（|V| + |E|）</strong></p></blockquote><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><blockquote><p>若邻接矩阵为三角矩阵，则存在拓扑排序；反之不一定成立。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/29/am9Yf1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;有向无环图：&lt;/strong&gt;不存在环的有向图, 简称&lt;strong&gt;DAG图&lt;/
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://wuhongbin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图" scheme="https://wuhongbin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    
    
      <category term="拓扑排序" scheme="https://wuhongbin.github.io/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>图的应用之最短路径 详细总结</title>
    <link href="https://wuhongbin.github.io/2020/06/08/%E5%9B%BE%E7%9A%84%E5%BA%94%E7%94%A8%E4%B9%8B%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/"/>
    <id>https://wuhongbin.github.io/2020/06/08/%E5%9B%BE%E7%9A%84%E5%BA%94%E7%94%A8%E4%B9%8B%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-08T08:15:43.000Z</published>
    <updated>2020-07-30T10:39:30.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h1><p>在网图和非网图中,最短路径的含义是不同的。          ·</p><p><strong>非网图：</strong> 两个顶点之间经过的边数最少的路径为 <strong>最短路径</strong>。</p><p>​    <strong>网图：</strong> 两个顶点之间带权路径长度最短的路径为 <strong>最短路径</strong>。   </p><p>在带权图当中,把从一个顶点v到另个顶点u所经历的边的权值之和称为,路径的 <strong>带权路径长度</strong>。</p><p>我们把路径起始的第一个顶点称为源点, 最后一个顶点称为终点。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/29/aZDH9e.png" alt=""></p><h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><h2 id="迪杰斯特拉（Dijkatra）算法"><a href="#迪杰斯特拉（Dijkatra）算法" class="headerlink" title="迪杰斯特拉（Dijkatra）算法"></a>迪杰斯特拉（Dijkatra）算法</h2><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><blockquote><p>Dijkstra <strong>带权图单源最短路径</strong></p></blockquote><h4 id="辅助数组"><a href="#辅助数组" class="headerlink" title="辅助数组"></a>辅助数组</h4><blockquote><p> <strong>s[]:</strong> 标记已经计算完成的顶点。          </p><p>数组中的值全部初始化为0。源点下标的值初始化为1。</p></blockquote><blockquote><p><strong>dist[]:</strong> 记录从源点vo到其他各顶点当前的最短路径长度。</p><p>数组中的值初始化为源点到格个顶点边的权值，即 dist [i] = arcs [0] [i]</p></blockquote><blockquote><p> <strong>path[]:</strong> 记录从最短路径中顶点的前驱顶点,即path[i] 为v到vi最短路径上ⅵ 的前驱顶点。</p><p>数组中的值初始化：</p><p>若源点v0到该顶点vi有一条有向边(无向边), 则令path[i] = 0  否则 path [i] = -1;</p></blockquote><h4 id="详细过程"><a href="#详细过程" class="headerlink" title="详细过程"></a>详细过程</h4><ol><li>初始化数组，并集合S初始为 {0}；</li><li>从顶点集合V-S中选出Vj，满足dist[j] = Min(dist [i] l Vi ∈ V-S}，Vj就是当前求得的最短路径的终点，并另S U { j }；</li><li>修改此时从V0出发到集合V-S上任一顶点Vk最短路径的长度：若dist[j]+arcs [j] [k] 则令 dist[k]=dist [j] + arcs [j] [k] ;  path[k]=j;</li><li>重复2、3步，操作n-1次，直到S中包含全部顶点；</li></ol><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/29/aZ2sbj.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/29/aZ2rrQ.png" alt=""></p><h3 id="参考代码实现"><a href="#参考代码实现" class="headerlink" title="参考代码实现"></a>参考代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(Graph G, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化部分</span></span><br><span class="line">    <span class="keyword">int</span> s[G. vexnum];</span><br><span class="line">    <span class="keyword">int</span> path[G.vexnum];</span><br><span class="line">    <span class="keyword">int</span> dist[G.vexnum];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dist[i] = G.edge[v][i];<span class="comment">//将dist[]数组初始化为源点到格个顶点边的权值</span></span><br><span class="line">        s[i] = <span class="number">0</span>;<span class="comment">//将s[]数组全部初始化为0</span></span><br><span class="line">        <span class="keyword">if</span>(G.edge[v][i] &lt; MAX)<span class="comment">//MAX表示∞，如果权值是∞说明不存在边，无前驱节点记为-1 </span></span><br><span class="line">            path[i] = v;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            path[i]=<span class="number">-1</span>;                         </span><br><span class="line">    &#125;</span><br><span class="line">    s[v] = <span class="number">0</span>;    <span class="comment">//顶点v没有记录过, 赋值为0。 例如: s[u] = 1, 表示顶点u已经记录过</span></span><br><span class="line">    path[v] = <span class="number">-1</span>;  <span class="comment">//v是源点，无前驱节点，记作-1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//真正实现部分</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">min</span> = MAX;<span class="comment">//临时变脸，记录最小权值  </span></span><br><span class="line">        <span class="keyword">int</span> u;<span class="comment">//临时变脸，记录最小权值边另一头的顶点下标</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; G.vexnum; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[j] == <span class="number">0</span> &amp;&amp; dist[j] &lt; <span class="built_in">min</span>)<span class="comment">//没被记录过过 &amp;&amp; 权值小</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">min</span> = dist[j];</span><br><span class="line">                u = j;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        s[u] = <span class="number">1</span>;<span class="comment">//表示顶点u已经记录过</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; G.vexnum; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//没被记录过过 &amp;&amp; (v-&gt;u + u-&gt;j) &lt; u-&gt;j</span></span><br><span class="line">            <span class="keyword">if</span>(s[j] == <span class="number">0</span> &amp;&amp; dist[u] + G.Edge[u][j]] &lt; dist[j])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[j] = dist[u] + G.Edge[u][j]];</span><br><span class="line">                path[j] = u;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度为 O(|V2|)</p></blockquote><h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><blockquote><p><strong>不适用于含有负权边的图</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/29/aZzkHs.png" alt=""></p><h2 id="弗洛伊德（Floyd）算法"><a href="#弗洛伊德（Floyd）算法" class="headerlink" title="弗洛伊德（Floyd）算法"></a>弗洛伊德（Floyd）算法</h2><h3 id="实现思路-1"><a href="#实现思路-1" class="headerlink" title="实现思路"></a>实现思路</h3><blockquote><p>Floyd <strong>各顶点之间的最短路径</strong></p></blockquote><h4 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h4><p>递推产生一个n阶方阵序列A(-1), A(0, A(k, .…, A(n-1)<br>A(k) [i] [j] 顶点vi到Vj的最短路径长度，且该路径经过的顶点编号不大于k</p><h4 id="递推公式"><a href="#递推公式" class="headerlink" title="递推公式"></a>递推公式</h4><p>初始化：A(-1) [i] [j] = arcs [i] [j]</p><p>地推方法：A(k) [i] [j] = MIn{A(k-1) [i] [j], A(k-1) [i] [k] + A(k-1) [k] [j]}, k = 0, 1, … , n-1</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/29/aeuH0I.png" alt=""></p><h3 id="实例分析-1"><a href="#实例分析-1" class="headerlink" title="实例分析"></a>实例分析</h3><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/29/aeu7nA.png" alt=""></p><h3 id="参考代码实现-1"><a href="#参考代码实现-1" class="headerlink" title="参考代码实现"></a>参考代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span> <span class="params">(Graph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化部分</span></span><br><span class="line">    <span class="keyword">int</span> A[G.vexnum][G.vexnum];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.vexnum; i++)    </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; G.vexnum; j++)    </span><br><span class="line">            A[i][j] = G.Edge[i][j];  </span><br><span class="line">    <span class="comment">//真正实现部分</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; j &lt; G.vexnum; i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; G.vexnum: j++)</span><br><span class="line"><span class="keyword">if</span>(a[i][j] &gt; a[i][k] + A[k][j])</span><br><span class="line">                   a[i][j] = a[i][k] + A[k][j];            </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最短路径&quot;&gt;&lt;a href=&quot;#最短路径&quot; class=&quot;headerlink&quot; title=&quot;最短路径&quot;&gt;&lt;/a&gt;最短路径&lt;/h1&gt;&lt;p&gt;在网图和非网图中,最短路径的含义是不同的。          ·&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非网图：&lt;/strong&gt; 
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://wuhongbin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图" scheme="https://wuhongbin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    
    
      <category term="最短路径" scheme="https://wuhongbin.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    
      <category term="迪杰斯特拉(Dijkatra)算法" scheme="https://wuhongbin.github.io/tags/%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89-Dijkatra-%E7%AE%97%E6%B3%95/"/>
    
      <category term="弗洛伊德(Floyd)算法" scheme="https://wuhongbin.github.io/tags/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7-Floyd-%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>图的应用之最小生成树 详细总结</title>
    <link href="https://wuhongbin.github.io/2020/06/07/%E5%9B%BE%E7%9A%84%E5%BA%94%E7%94%A8%E4%B9%8B%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/"/>
    <id>https://wuhongbin.github.io/2020/06/07/%E5%9B%BE%E7%9A%84%E5%BA%94%E7%94%A8%E4%B9%8B%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-07T08:15:43.000Z</published>
    <updated>2020-07-30T10:34:14.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生成树"><a href="#生成树" class="headerlink" title="生成树"></a>生成树</h1><p><strong>定义：</strong> 连通图包含全部顶点的一个极小连通子图</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/26/apOGU1.png" alt=""></p><h1 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h1><p><strong>定义：</strong> 对于 <strong>带权无向连通图</strong> G = ( V, E ), G的所有生成树当中边的 <strong>权值之和最小</strong> 的生成树为G的 <strong>最小生成树(MST)</strong> 。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/26/apXPG6.png" alt=""></p><h1 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h1><ol><li><p>最小生成树不一定唯一,即最小生成树的树形不一定唯一。当带权无向连通图G的各边权值不等时或G只有结点数减1条边时,MST唯一    </p></li><li><p>最小生成树的权值是唯一的, 且是最小    </p></li><li><p>最小生成树的边数为顶点数减1</p></li></ol><h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><h2 id="Prim-（普里姆）算法"><a href="#Prim-（普里姆）算法" class="headerlink" title="Prim （普里姆）算法"></a>Prim （普里姆）算法</h2><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><ol><li><strong>初始化：</strong>向空的结果树 T =（Vt，Et) 中添加图 G =（V, E) 的任一顶点u0，使 Vt = {u0}，Et为空集；</li><li><strong>循环（直到Vt = V)：</strong>从图G中选择满足 { (u, v) | u∈Vt ，v∈ V-Vt }且具有最小权值的边（u，v），并置Vt = Vt U {v} , Et =Et U (u, v) }。</li></ol><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/26/a9ClrV.png" alt=""></p><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/26/a9AdH0.png" alt=""></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><blockquote><p><strong>辅助数组理解：</strong></p><p>min_weight [n] ：存放相关顶点间边的权值 </p><p><strong>表示最小生成树中已存放的顶点到未存放顶点的最小权值</strong></p><p>例：假设有 v0，v1，v2，v3，v4 这5个顶点</p><p>min_weight [5] = {0, 2, 0, 0, 0} <strong>表示最小生成树中已存放的顶点到顶点v1的最小权值是2</strong></p><p>adjvex [n] ：存放相关顶点的下标    </p><p>例：假设有 v0，v1，v2，v3，v4 这5个顶点</p><p>adjvex [5] = {0, 0, 1, 0, 1} <strong>表示顶点v2和顶点v4 这两个点和顶点v1间都有边</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MST_Prim</span><span class="params">(Graph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> min_weight[G.vexnum];<span class="comment">//存放相关顶点间边的权值</span></span><br><span class="line">    <span class="keyword">int</span> adjvex[G.vexnum];<span class="comment">//存放相关顶点的下标 </span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">//初始化操作</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        min_weight[i] = G.Edge[<span class="number">0</span>][i];<span class="comment">//将邻接矩阵第0行所有权值加入数组</span></span><br><span class="line">        adjvex[i] = <span class="number">0</span>;<span class="comment">//全部初始化为v0下标</span></span><br><span class="line">    &#125;</span><br><span class="line">                   </span><br><span class="line">    <span class="comment">//正式构造最小生成树的过程               </span></span><br><span class="line">    <span class="keyword">int</span> min_arc;<span class="comment">//临时变量，表示当前最小权值</span></span><br><span class="line">    <span class="keyword">int</span> min_vex;<span class="comment">//临时变量，表示当前最小权值边的顶点数组下标</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; G.vexnum; i++)   <span class="comment">//由于有一个顶点已在最小生成树中，所以只遍历n-1次</span></span><br><span class="line">    &#123;</span><br><span class="line">        min_arc = INT_MAX;<span class="comment">//初始化最小权值为65535等不可能数值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; G.vexnum; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//找出min_weight[]数组中已存的最小权值</span></span><br><span class="line">             <span class="keyword">if</span>(min_weight[j] != <span class="number">0</span> &amp;&amp; min_weight[j] &lt; min_arc)</span><br><span class="line">             &#123;</span><br><span class="line">                 min_arc = min_weight[j];</span><br><span class="line">                 min_vex = j;<span class="comment">//将发现最小权值的下标存入min_vex, 待使用</span></span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        min_weight[min_vex] = <span class="number">0</span>;<span class="comment">//将当前顶点的权值设为0，表示此顶点已完成任务</span></span><br><span class="line">        <span class="comment">//遍历全部顶点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; G.vexnum; j++)</span><br><span class="line">        &#123; </span><br><span class="line">             <span class="keyword">if</span>(min_weight[j] != <span class="number">0</span> &amp;&amp; G.Edge[min_vex][j] &lt; min_weight[j])</span><br><span class="line">             &#123;</span><br><span class="line">                 min_weight[j] = G.Edge[min_vex][j];</span><br><span class="line">                 adjvex[j] = min_arc;</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>结论：</strong></p><p>此算法时间复杂度为 O(V2)，适用于<strong>稠密图</strong></p></blockquote><h2 id="Kruskal（克鲁斯卡尔）算法"><a href="#Kruskal（克鲁斯卡尔）算法" class="headerlink" title="Kruskal（克鲁斯卡尔）算法"></a>Kruskal（克鲁斯卡尔）算法</h2><h3 id="算法思路-1"><a href="#算法思路-1" class="headerlink" title="算法思路"></a>算法思路</h3><ol><li><strong>初始化：</strong>Vt = V，Et = 空集。即是每个顶点构成一棵独立的树，T是一个仅含V个顶点的森林；</li><li><strong>循环（直到T为树）：</strong>按图G的边的权值递增的顺序依次从 E-Et 中选择一条边，若这条边加入后不构成回路，则将其加入E，否则舍弃。</li></ol><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/26/a9WD8s.png" alt=""></p><h3 id="并查集（必看）"><a href="#并查集（必看）" class="headerlink" title="并查集（必看）"></a>并查集（必看）</h3><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/26/a9jQIA.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/26/a9jMad.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/26/a9j1PI.png" alt=""></p><h3 id="实例分析-1"><a href="#实例分析-1" class="headerlink" title="实例分析"></a>实例分析</h3><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/26/a9OeW6.png" alt=""></p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a, b;<span class="comment">//两个端点下标</span></span><br><span class="line">    <span class="keyword">int</span> weight;     <span class="comment">//权值</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MST_Kruskal</span><span class="params">(Graph G, Edge* edges, <span class="keyword">int</span>* parent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    heap_sort(edges);<span class="comment">//堆排序</span></span><br><span class="line">    Initial(parent);<span class="comment">//全部初始化为 -1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.arcnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a_root = Find(parent, edges[i].a);</span><br><span class="line">        <span class="keyword">int</span> b_root = Find(parent, edges[il.b);</span><br><span class="line">        <span class="keyword">if</span>(a_root != b_root)</span><br><span class="line">        Union(parent, a_root, b_root);<span class="comment">//合并</span></span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>结论：</strong></p><p>此算法时间复杂度为 O(|E|log|E|)，适用于<strong>稀疏图</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;生成树&quot;&gt;&lt;a href=&quot;#生成树&quot; class=&quot;headerlink&quot; title=&quot;生成树&quot;&gt;&lt;/a&gt;生成树&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;定义：&lt;/strong&gt; 连通图包含全部顶点的一个极小连通子图&lt;/p&gt;
&lt;p&gt;&lt;img src= &quot;/img/loa
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://wuhongbin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图" scheme="https://wuhongbin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    
    
      <category term="最小生成树" scheme="https://wuhongbin.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="并查集" scheme="https://wuhongbin.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="Prim(普里姆)算法" scheme="https://wuhongbin.github.io/tags/Prim-%E6%99%AE%E9%87%8C%E5%A7%86-%E7%AE%97%E6%B3%95/"/>
    
      <category term="Kruskal(克鲁斯卡尔)算法" scheme="https://wuhongbin.github.io/tags/Kruskal-%E5%85%8B%E9%B2%81%E6%96%AF%E5%8D%A1%E5%B0%94-%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>图的遍历之深度优先搜索(DFS) 详细总结</title>
    <link href="https://wuhongbin.github.io/2020/06/06/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86%E4%B9%8B%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/"/>
    <id>https://wuhongbin.github.io/2020/06/06/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86%E4%B9%8B%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-06T08:15:43.000Z</published>
    <updated>2020-07-30T05:47:09.929Z</updated>
    
    <content type="html"><![CDATA[<h2 id="深度度优先搜索"><a href="#深度度优先搜索" class="headerlink" title="深度度优先搜索"></a>深度度优先搜索</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><strong>深度优先搜索(DepthFirstSearch)</strong>,也有称为深度优先遍历,简称为 <strong>DFS</strong>。  </p><blockquote><p>​        还是拿找钥匙例子来说,  无论从哪一间房间开始都可以,将间内的墙角  、床头柜、床上、床下、衣柜、电视柜等挨个寻  找,做到不放过任何一个死角,当所有的抽屉、  储藏柜中全部都找遍,接着再寻找下一个房间。</p></blockquote><h3 id="具体实现思路"><a href="#具体实现思路" class="headerlink" title="具体实现思路"></a>具体实现思路</h3><ol><li><p>首先访问起始顶点v;  </p></li><li><p>接着由v出发访问v的任意一个 <strong>邻接且未被访问</strong> 的邻接顶点Wi  </p></li><li><p>然后再访问与Wi <strong>邻接且未被访问</strong> 的任意顶点 yi;  </p></li><li><p>若w没有邻接且未被访问的顶点时, 退回到它的上一层顶点v;  </p></li><li><p>重复上述过程,直到所有顶点被访问为止。</p></li></ol><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/25/Uz7eqP.png" alt=""></p><blockquote><p><strong>由此看出，深度优先搜索与树的先序遍历类似</strong></p></blockquote><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/25/Uz7sMR.png" alt=""></p><blockquote><p>小提示：遵循右手原则遍历，蓝色线为走的线</p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/25/Uz7ys1.png" alt=""></p><h3 id="参考代码实现"><a href="#参考代码实现" class="headerlink" title="参考代码实现"></a>参考代码实现</h3><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/25/UzbBuR.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> visited[MAX_TREE_SIZE]</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSTraverse</span><span class="params">(Graph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.vexnum; ++i)</span><br><span class="line">        visited[i] = FALSE;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.vexnum; ++i)</span><br><span class="line">        <span class="keyword">if</span>(!visited[i])</span><br><span class="line">            DFS(G, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span> <span class="params">(Graph G, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    visit(v);</span><br><span class="line">    visited[v] = TRUE;</span><br><span class="line">    <span class="keyword">for</span>(w = FirstNeighbor(G, v); w &gt;= <span class="number">0</span>; w = NextNeighbor(G, v, w))</span><br><span class="line">    <span class="keyword">if</span>(!visited[i])        i</span><br><span class="line">            DFS(G, w);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>此篇博客仅为本人根据个人理解复习总结所写，如有错误之处，请在下方评论或者联系我，我会第一时间改正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;深度度优先搜索&quot;&gt;&lt;a href=&quot;#深度度优先搜索&quot; class=&quot;headerlink&quot; title=&quot;深度度优先搜索&quot;&gt;&lt;/a&gt;深度度优先搜索&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://wuhongbin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图" scheme="https://wuhongbin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    
    
      <category term="深度度优先搜索" scheme="https://wuhongbin.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>图的遍历之广度优先搜索(BFS) 详细总结</title>
    <link href="https://wuhongbin.github.io/2020/06/05/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86%E4%B9%8B%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/"/>
    <id>https://wuhongbin.github.io/2020/06/05/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86%E4%B9%8B%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-05T06:15:43.000Z</published>
    <updated>2020-07-30T10:32:48.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><p>从图中某一顶点出发，按照某种搜索方法沿着图中的边对图中的所有顶点访问一次且仅访问一次。</p><h2 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><strong>广度优先搜索（BreadthFirstSearch)</strong>，又称为广度优先遍历，简称 <strong>BFS</strong>。</p><blockquote><p>​        如果以之前我们找钥匙的例子来讲，运用深度优先遍历意味着要先彻底查找完一个房间再开始另一个房间但我们知道，钥匙放在沙发地下等特角奇兄的可能性极低，因此我们运用新的方亲：先看看钥匙是否放在各个房间的显服位置，如果没有，再看看各个房间的抽屉有没有。这样逐步扩大查找的范围的方式我们称为 <strong>广度优先搜索</strong> 。</p></blockquote><h3 id="具体实现思路"><a href="#具体实现思路" class="headerlink" title="具体实现思路"></a>具体实现思路</h3><ol><li>首先访问起始顶点v；</li><li>接着由出发依次访问v的各个 <strong>未被访问过</strong> 的邻接顶点W1, W2….Wi；</li><li>然后依次访问W1, W2…,Wi 的所有 <strong>未被访问过</strong> 的邻接顶点；</li><li>在从这些访问过的顶点出发，访问它们所有 <strong>未被访问过的</strong> 邻接顶点.</li><li>….以此类推；</li></ol><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/24/UvUKr8.png" alt=""></p><blockquote><p><strong>由此看出，广度优先搜索与树的层次遍历类似</strong></p></blockquote><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/25/UzeahF.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/25/UzeUtU.png" alt=""></p><h3 id="参考代码实现-邻接矩阵"><a href="#参考代码实现-邻接矩阵" class="headerlink" title="参考代码实现 (邻接矩阵)"></a>参考代码实现 (邻接矩阵)</h3><blockquote><p><strong>温馨提示：请结合本博客另一博文《图的存储结构之邻接矩阵 详细总结》参考学习</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//邻接矩阵的广度优先搜索</span></span><br><span class="line"><span class="keyword">bool</span> visited[MAX_TRUE_SIZE];<span class="comment">//辅助标记数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSTraverse</span><span class="params">(Mgraph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    Queue Q;</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; G.vexnum; i++)<span class="comment">//将辅助标记数组全部初始化为FALSE, G.vexnum表示顶点数</span></span><br><span class="line">    &#123;</span><br><span class="line">        visited[i] = FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    initQueue( &amp;Q);<span class="comment">//初始化队列</span></span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c  "</span>, G.vex[i]);<span class="comment">//访问顶点</span></span><br><span class="line">            visited[i] = TRUE;</span><br><span class="line">            EnQueue(&amp;Q, i);</span><br><span class="line">            <span class="keyword">while</span>(!QueueEmpty(Q))</span><br><span class="line">            &#123;</span><br><span class="line">                DeQueue(&amp;Q, i);</span><br><span class="line">                <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; G.vexnum; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(G.art[i][j]) == <span class="number">1</span> &amp;&amp; !visited[j])<span class="comment">//等于1 且 未被访问</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%c  "</span>, G.vex[i]);<span class="comment">//访问顶点</span></span><br><span class="line">                        visited[j] = TRUE;</span><br><span class="line">            EnQueue(&amp;Q, j);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考代码实现-邻接表"><a href="#参考代码实现-邻接表" class="headerlink" title="参考代码实现 (邻接表)"></a>参考代码实现 (邻接表)</h3><blockquote><p><strong>温馨提示：请结合本博客另一博文《图的存储结构之邻接表 详细总结》参考学习</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//邻接表的广度优先搜索</span></span><br><span class="line"><span class="keyword">bool</span> visited[MAX_TRUE_SIZE];<span class="comment">//辅助标记数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSTraverse</span><span class="params">(Mgraph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    Queue Q;</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; G.vexnum; i++)<span class="comment">//将辅助标记数组全部初始化为FALSE, G.vexnum表示顶点数</span></span><br><span class="line">    &#123;</span><br><span class="line">        visited[i] = FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    initQueue( &amp;Q);<span class="comment">//初始化队列</span></span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c  "</span>, G.vetices[i].data);<span class="comment">//访问顶点</span></span><br><span class="line">            visited[i] = TRUE;</span><br><span class="line">            EnQueue(&amp;Q, i);</span><br><span class="line">            <span class="keyword">while</span>(!QueueEmpty(Q))</span><br><span class="line">            &#123;</span><br><span class="line">                DeQueue(&amp;Q, i);</span><br><span class="line">                ArcNode P = G.AdjList[i].first;</span><br><span class="line">                <span class="keyword">while</span>(p != <span class="literal">NULL</span> &amp;&amp; !visited[i])<span class="comment">// 单链表指针为非NULL 且 未被访问</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%c  "</span>, G.vetices[p.adjvex].data);<span class="comment">//访问顶点</span></span><br><span class="line">                    visited[j] = TRUE;</span><br><span class="line">                    EnQueue(&amp;Q, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>此篇博客仅为本人根据个人理解复习总结所写，如有错误之处，请在下方评论或者联系我，我会第一时间改正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;图的遍历&quot;&gt;&lt;a href=&quot;#图的遍历&quot; class=&quot;headerlink&quot; title=&quot;图的遍历&quot;&gt;&lt;/a&gt;图的遍历&lt;/h2&gt;&lt;p&gt;从图中某一顶点出发，按照某种搜索方法沿着图中的边对图中的所有顶点访问一次且仅访问一次。&lt;/p&gt;
&lt;h2 id=&quot;广度优先搜索
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://wuhongbin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图" scheme="https://wuhongbin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    
    
      <category term="广度优先搜索" scheme="https://wuhongbin.github.io/tags/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>图的基本操作 详细总结</title>
    <link href="https://wuhongbin.github.io/2020/06/04/%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/"/>
    <id>https://wuhongbin.github.io/2020/06/04/%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-04T03:15:43.000Z</published>
    <updated>2020-07-30T10:30:29.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="操作一-判断边存在"><a href="#操作一-判断边存在" class="headerlink" title="操作一 判断边存在"></a>操作一 判断边存在</h2><blockquote><p><strong>Adjacent(G, x, y) 判断图G是否存在边 &lt;x, y&gt; 或 (x, y)</strong></p></blockquote><h3 id="实例（无向图）"><a href="#实例（无向图）" class="headerlink" title="实例（无向图）"></a>实例（无向图）</h3><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/24/UveNTO.png" alt=""></p><h3 id="实例（有向图）"><a href="#实例（有向图）" class="headerlink" title="实例（有向图）"></a>实例（有向图）</h3><p><strong><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/24/UvmT8H.png" alt=""></strong></p><h2 id="操作二-找邻边"><a href="#操作二-找邻边" class="headerlink" title="操作二 找邻边"></a>操作二 找邻边</h2><blockquote><p><strong>Neighbors(G, x) 列出图G中与结点x邻接的边</strong></p></blockquote><h3 id="实例（无向图）-1"><a href="#实例（无向图）-1" class="headerlink" title="实例（无向图）"></a>实例（无向图）</h3><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/24/Uvnhyn.png" alt=""></p><h3 id="实例（有向图）-1"><a href="#实例（有向图）-1" class="headerlink" title="实例（有向图）"></a>实例（有向图）</h3><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/24/Uvn4Lq.png" alt=""></p><h2 id="操作三-插入顶点"><a href="#操作三-插入顶点" class="headerlink" title="操作三 插入顶点"></a>操作三 插入顶点</h2><blockquote><p><strong>InsertVertex(G,x) 在图G中插入顶点x</strong></p></blockquote><h3 id="插入顶点F前"><a href="#插入顶点F前" class="headerlink" title="插入顶点F前"></a>插入顶点F前</h3><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/24/UvKlE6.png" alt=""></p><h3 id="插入顶点F后"><a href="#插入顶点F后" class="headerlink" title="插入顶点F后"></a>插入顶点F后</h3><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/24/UvK1UK.png" alt=""></p><h2 id="操作四-删除顶点"><a href="#操作四-删除顶点" class="headerlink" title="操作四 删除顶点"></a>操作四 删除顶点</h2><blockquote><p><strong>DeleteVertex(G, x) 从图G中删除顶点x</strong></p></blockquote><h3 id="删除顶点A前"><a href="#删除顶点A前" class="headerlink" title="删除顶点A前"></a>删除顶点A前</h3><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/24/UvQE6J.png" alt=""></p><h3 id="删除顶点A后"><a href="#删除顶点A后" class="headerlink" title="删除顶点A后"></a>删除顶点A后</h3><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/24/UvQAl4.png" alt=""></p><h2 id="操作五-添加边"><a href="#操作五-添加边" class="headerlink" title="操作五 添加边"></a>操作五 添加边</h2><blockquote><p><strong>AddEdge(G, x, y) 若无向边(x,y) 或者 有向边&lt;x, y&gt;不存在,则向图中添加该边</strong></p></blockquote><h3 id="添加边AD前"><a href="#添加边AD前" class="headerlink" title="添加边AD前"></a>添加边AD前</h3><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/24/UvlGCT.png" alt=""></p><h3 id="添加边AD后"><a href="#添加边AD后" class="headerlink" title="添加边AD后"></a>添加边AD后</h3><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/24/Uvl35V.png" alt=""></p><h2 id="操作六-删除边"><a href="#操作六-删除边" class="headerlink" title="操作六 删除边"></a>操作六 删除边</h2><blockquote><p><strong>RemoveEdge(G, x, y)若 无向边(x, y) 或者 有向边&lt;x, y&gt;存在,则在图G中删除该边</strong></p></blockquote><h3 id="删除边BC前"><a href="#删除边BC前" class="headerlink" title="删除边BC前"></a>删除边BC前</h3><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/24/Uv3gHA.png" alt=""></p><h3 id="删除边BC后"><a href="#删除边BC后" class="headerlink" title="删除边BC后"></a>删除边BC后</h3><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/24/Uv3cBd.png" alt=""></p><h2 id="操作七-找顶点的邻接点"><a href="#操作七-找顶点的邻接点" class="headerlink" title="操作七 找顶点的邻接点"></a>操作七 找顶点的邻接点</h2><blockquote><p><strong>FirstNeighbor(G, x) 求图G中顶点X的第一个邻接点，若有则返回顶点号。若没有邻接点或图不存在x，则返回 -1。<br>NextNeighbor(G, x) 假设图G中顶点y是顶点x的一个邻接点，返回除y之外顶点x的下一个邻接点的顶点号，若y是的最后一个邻接点，则返回 -1。</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/24/Uv862T.png" alt=""></p><h2 id="操作八-网获取或设置权值"><a href="#操作八-网获取或设置权值" class="headerlink" title="操作八 网获取或设置权值"></a>操作八 网获取或设置权值</h2><blockquote><p><strong>Get edge value(G, x, y) 获取图G中边(x, y) 或 &lt;x, y&gt; 对应的权值v。</strong>  </p><p><strong>Set edge value(G, x, y) 设置图G中边(x, y) 或 &lt;x, y&gt; 对应的权值为v。</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/24/UvG1L4.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;操作一-判断边存在&quot;&gt;&lt;a href=&quot;#操作一-判断边存在&quot; class=&quot;headerlink&quot; title=&quot;操作一 判断边存在&quot;&gt;&lt;/a&gt;操作一 判断边存在&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Adjacent(G, x, y) 判断图
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://wuhongbin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图" scheme="https://wuhongbin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>图的存储结构之邻接多重表 详细总结</title>
    <link href="https://wuhongbin.github.io/2020/06/03/%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B9%8B%E9%82%BB%E6%8E%A5%E5%A4%9A%E9%87%8D%E8%A1%A8%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/"/>
    <id>https://wuhongbin.github.io/2020/06/03/%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B9%8B%E9%82%BB%E6%8E%A5%E5%A4%9A%E9%87%8D%E8%A1%A8%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-03T09:15:50.000Z</published>
    <updated>2020-07-30T10:31:56.666Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​        如果我们在无向图的应用中,关注的重点是顶点的话,那么邻接表是不错的选择,但如果我们更关注的是边的操作,比如对已经访问过的边做标记, 或者删除某一条边等操作,邻接表就显得不那么方便了。</p><h2 id="邻接多重表"><a href="#邻接多重表" class="headerlink" title="邻接多重表"></a>邻接多重表</h2><p><strong>邻接多重表：</strong> 无向图的一种存储结构</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/23/UOkyiq.png" alt=""></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/23/UOk6J0.png" alt=""></p><h2 id="参考代码实现"><a href="#参考代码实现" class="headerlink" title="参考代码实现"></a>参考代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxVertexNum 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span>&#123;</span><span class="comment">//边表结点</span></span><br><span class="line">    <span class="keyword">int</span> ivex,jvex; </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">ilink</span>, *<span class="title">jlink</span>;</span></span><br><span class="line">    <span class="comment">//Inforype info;</span></span><br><span class="line">    <span class="comment">//bool mark;</span></span><br><span class="line">&#125;ArcNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VNode</span>&#123;</span><span class="comment">//顶点结点</span></span><br><span class="line">    VertexType data;</span><br><span class="line">    ArcNode *firstedge;</span><br><span class="line">&#125;VNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span><span class="comment">//邻接多重表</span></span><br><span class="line">    VNode adjmulist[MaxVertexNum];</span><br><span class="line">    <span class="keyword">int</span> vexnum,arcnum;</span><br><span class="line">&#125;AMLGraph；</span><br></pre></td></tr></table></figure><h2 id="十字链表-VS-邻接多重表"><a href="#十字链表-VS-邻接多重表" class="headerlink" title="十字链表 VS 邻接多重表"></a>十字链表 VS 邻接多重表</h2><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/23/UOVeGq.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​        如果我们在无向图的应用中,关注的重点是顶点的话,那么邻接表是不错的选择,但如果我们更关注的是边的操作,比如对已经访问过的边
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://wuhongbin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图" scheme="https://wuhongbin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    
    
      <category term="图" scheme="https://wuhongbin.github.io/tags/%E5%9B%BE/"/>
    
      <category term="邻接多重表" scheme="https://wuhongbin.github.io/tags/%E9%82%BB%E6%8E%A5%E5%A4%9A%E9%87%8D%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>图的存储结构之十字链表 详细总结</title>
    <link href="https://wuhongbin.github.io/2020/06/03/%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8D%81%E5%AD%97%E9%93%BE%E8%A1%A8%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/"/>
    <id>https://wuhongbin.github.io/2020/06/03/%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8D%81%E5%AD%97%E9%93%BE%E8%A1%A8%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-03T01:15:50.000Z</published>
    <updated>2020-07-30T10:32:20.651Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​       邻接表 固然优秀，但也有不足。例如，对有向图的处理上，有时候需要再建立一个逆邻接表，这就不是很方便了。那我们思考了：有没有可能把邻接表和逆邻接表 结合起呢？答亲是肯定的，这就是我们现在要谈的十字链表 (Orthogonal List)。</p><h2 id="十字链表"><a href="#十字链表" class="headerlink" title="十字链表"></a>十字链表</h2><p><strong>十字链表</strong> 是有向图的一种链式存储结构</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/23/ULznFU.png" alt=""></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/23/UO99JO.png" alt=""></p><h2 id="参考代码实现"><a href="#参考代码实现" class="headerlink" title="参考代码实现"></a>参考代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxVertexNum 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span>&#123;</span><span class="comment">//边表结点</span></span><br><span class="line">    <span class="keyword">int</span> tailvex,headvex;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">hlink</span>, <span class="title">tlink</span>;</span></span><br><span class="line">    <span class="comment">//Inforype info;</span></span><br><span class="line">&#125;ArcNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">vNodet</span>&#123;</span><span class="comment">//顶点表结点</span></span><br><span class="line">    VertexType data;</span><br><span class="line">    ArcNode *firstin, *firstout;</span><br><span class="line">]VNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span><span class="comment">//十字链表</span></span><br><span class="line">    VNode xlist[MaxVertexNum];</span><br><span class="line">    <span class="keyword">int</span> vexnum,arcnum;</span><br><span class="line">&#125;GLGraph;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        十字链表的好处就是因为 <strong>把邻接表和逆邻接表整合在了一起</strong> , 这样既容易找到以Vi为尾的弧,也  容易找到以Vj为头的弧,因而容易求得顶点的出度和入度。</p><p>​        十字链表除了结构复杂一点外,其实创建图算法的肘间复杂度是和邻接表相同的,因此,在有向图的应用中,十字链表也是非常好的数据结构模型。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​       邻接表 固然优秀，但也有不足。例如，对有向图的处理上，有时候需要再建立一个逆邻接表，这就不是很方便了。那我们思考了：有没有可
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://wuhongbin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图" scheme="https://wuhongbin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    
    
      <category term="图" scheme="https://wuhongbin.github.io/tags/%E5%9B%BE/"/>
    
      <category term="十字链表" scheme="https://wuhongbin.github.io/tags/%E5%8D%81%E5%AD%97%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>图的存储结构之邻接表 详细总结</title>
    <link href="https://wuhongbin.github.io/2020/06/02/%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B9%8B%E9%82%BB%E6%8E%A5%E8%A1%A8%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/"/>
    <id>https://wuhongbin.github.io/2020/06/02/%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B9%8B%E9%82%BB%E6%8E%A5%E8%A1%A8%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-02T03:15:43.000Z</published>
    <updated>2020-07-30T10:31:32.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    由于邻接矩阵适用于存储稠密图，如果用邻接矩阵存储 <strong>稀疏图</strong> 会造成极大的 <strong>空间浪费</strong> ，因此我们来学习 <strong>邻接表</strong> 来存储稀疏图。</p><h2 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h2><p><strong>总体思路：</strong>为每个顶点建立一个单链表存放与它相邻的边</p><table><thead><tr><th>顶点表</th><th>采用顺序存储,每个数组元素存放顶点的数据和边表的头指针</th></tr></thead><tbody><tr><td><strong>边表(出边表)</strong></td><td><strong>采用链式存储,单链表中存放与一个顶点相邻的所有边,一个链表结点表示一条从该顶点到链表结点顶点的边</strong></td></tr></tbody></table><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/23/ULM2oF.png" alt=""></p><h2 id="实例（无向图）"><a href="#实例（无向图）" class="headerlink" title="实例（无向图）"></a>实例（无向图）</h2><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/23/ULQOBV.png" alt=""></p><h2 id="实例（有向图）"><a href="#实例（有向图）" class="headerlink" title="实例（有向图）"></a>实例（有向图）</h2><blockquote><p><strong>提示：</strong> 下图把顶点当作弧尾建立的 <strong>邻接表</strong> ，如果把顶点当作弧头建立，则称为 <strong>逆邻接表</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/23/ULQLn0.png" alt=""></p><h2 id="参考代码实现"><a href="#参考代码实现" class="headerlink" title="参考代码实现"></a>参考代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxVertexNum 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span>&#123;</span><span class="comment">//边表结点</span></span><br><span class="line">        <span class="keyword">int</span> adjvex;<span class="comment">//顶点下标</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">next</span>；  //指向下一个边表结点的指针</span></span><br><span class="line"><span class="class">        //<span class="title">Inforype</span> <span class="title">info</span>;</span><span class="comment">//权值</span></span><br><span class="line">&#125;ArcNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VNode</span>&#123;</span><span class="comment">//顶点表结点</span></span><br><span class="line">        VertexType data;<span class="comment">//顶点数据</span></span><br><span class="line">        ArcNode *first;<span class="comment">//指向它的单链表的头指针</span></span><br><span class="line">&#125;VNode, AdjList[MaxVertexNum];</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">        AdjList vetices;<span class="comment">//定义邻接表</span></span><br><span class="line">        <span class="keyword">int</span> vexnum,arcnum;<span class="comment">//顶点数，边数</span></span><br><span class="line">&#125;ALGraph</span><br></pre></td></tr></table></figure><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/23/ULJ5NV.png" alt=""></p><h2 id="邻接矩阵-VS-邻接表"><a href="#邻接矩阵-VS-邻接表" class="headerlink" title="邻接矩阵 VS 邻接表"></a>邻接矩阵 VS 邻接表</h2><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/23/ULYKgg.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​    由于邻接矩阵适用于存储稠密图，如果用邻接矩阵存储 &lt;strong&gt;稀疏图&lt;/strong&gt; 会造成极大的 &lt;strong&gt;空间浪费
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://wuhongbin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图" scheme="https://wuhongbin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    
    
      <category term="图" scheme="https://wuhongbin.github.io/tags/%E5%9B%BE/"/>
    
      <category term="邻接表" scheme="https://wuhongbin.github.io/tags/%E9%82%BB%E6%8E%A5%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>图的存储结构之邻接矩阵 详细总结</title>
    <link href="https://wuhongbin.github.io/2020/06/02/%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B9%8B%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/"/>
    <id>https://wuhongbin.github.io/2020/06/02/%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B9%8B%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-02T02:15:43.000Z</published>
    <updated>2020-07-30T10:31:03.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="邻接矩阵的定义"><a href="#邻接矩阵的定义" class="headerlink" title="邻接矩阵的定义"></a>邻接矩阵的定义</h2><p><strong>图的邻接矩阵（Adjacency Matrix）</strong>存储方式是用两个数组来表示图。一个 <strong>一维数组 *<em>存储图中顶点信息，一个 *</em>二维数组</strong>(称为邻接矩阵) 存储图中的边或弧的信息。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/Ub3rkD.png" alt=""></p><h2 id="图的领接矩阵实现思路"><a href="#图的领接矩阵实现思路" class="headerlink" title="图的领接矩阵实现思路"></a>图的领接矩阵实现思路</h2><p>结点数为n的图G=(V)的邻接矩阵A是nxn的。 </p><p>将G的顶点编号为V1,V2…Vn(数组下标) </p><p>若&lt;Vi,Vj&gt; ∈E，则 A [i] [j] = 1，否则 A [i] [j] = 0</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/Ub8n4e.png" alt=""></p><h3 id="实例（有向图）"><a href="#实例（有向图）" class="headerlink" title="实例（有向图）"></a>实例（有向图）</h3><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/UbNmpF.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/UbNnl4.png" alt=""></p><h3 id="实例（无向图）"><a href="#实例（无向图）" class="headerlink" title="实例（无向图）"></a>实例（无向图）</h3><p><strong><font color=red>注意：</font></strong> 下图中修改部分的值均为 <strong>1</strong></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/UbdSSO.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/UbdplD.png" alt=""></p><h2 id="网的邻接矩阵实现思路"><a href="#网的邻接矩阵实现思路" class="headerlink" title="网的邻接矩阵实现思路"></a>网的邻接矩阵实现思路</h2><blockquote><p><strong>小提示：</strong>网也就是带权值的图</p></blockquote><p>结点数为n的图G=(V)的邻接矩阵A是nxn的。 </p><p>将G的顶点编号为V1,V2…Vn(数组下标) </p><p>若&lt;Vi,Vj&gt; ∈E，则 A [i] [j] = Wi,j，否则 A [i] [j] = ∞</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/Ub5cXd.png" alt=""></p><h3 id="实例（无向图）-1"><a href="#实例（无向图）-1" class="headerlink" title="实例（无向图）"></a>实例（无向图）</h3><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/23/Uqy1XV.png" alt=""></p><h3 id="参考代码实现"><a href="#参考代码实现" class="headerlink" title="参考代码实现"></a>参考代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxVertexNum 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> EdgeType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    VertexType Vex[MaxVertexNum];<span class="comment">//点集</span></span><br><span class="line">    EdgeType Edge[MaxVertexNum][MaxVertexNum];<span class="comment">//边集</span></span><br><span class="line">    <span class="keyword">int</span> vexnum,arcnum;<span class="comment">//结点数量，边的数量</span></span><br><span class="line">&#125;MGraph</span><br></pre></td></tr></table></figure><h2 id="邻接矩阵的性质"><a href="#邻接矩阵的性质" class="headerlink" title="邻接矩阵的性质"></a>邻接矩阵的性质</h2><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/23/Uqy1XV.png" alt=""></p><ol><li><p>邻接矩阵法的空间复杂为O(n2), 适用于 <strong>稠密图</strong></p></li><li><p>无向图的邻接矩阵为 <strong>对称矩阵</strong> </p></li><li><p>无向图中第 i 行 (第 i 列) 非0元素 (非正无穷) 的个数为第 i 个顶点的度 </p></li><li><p>有向图中第 i 行 (第 i 列) 非0元素 (非正无穷) 的个数为第 i 个顶点的出度(入度）</p></li></ol><h2 id="问题探索"><a href="#问题探索" class="headerlink" title="问题探索"></a>问题探索</h2><blockquote><p><strong>问题：</strong>设图G的邻接矩阵为A,矩阵运算 <strong>A的n次</strong> 的含义？？？</p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/23/Uq5RZn.png" alt=""></p><p><strong><font color=red>小提示：</font></strong> 以下 An 代表 A的n次，例如 A2 代表 A的2次</p><p><strong><font color=red>分析：</font></strong></p><p>A2 [2] [5]=1 * 1 + 0 * 0 + 1 * 1 + 0 * 0 + 0 * 0 = 2 </p><p>A2 [2] [5] = 2 表示从顶点v2到顶点v5长度为2的路径有 2 条</p><p>A3 [2] [5] = 0 * 1 + 0 * 0 + 1 * 1 + 1 * 0 + 2 * 0 = 1 </p><p>A2 [2] [3] = 1 表示从顶点v2到顶点v3长度为2的路径有 1 条 </p><p>A3 [2] [5] = 1 表示从顶点v2到顶点v5长度为3的路径有 1 条 </p><p><strong><font color=red>结论：</font></strong></p><p>An [i] [j] = x 表示从顶点Vi到顶点Vj长度为n的路径有 x 条</p><p>即：An [i] [j] 表示从顶点Vi到顶点Vj长度为n的路径条数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;邻接矩阵的定义&quot;&gt;&lt;a href=&quot;#邻接矩阵的定义&quot; class=&quot;headerlink&quot; title=&quot;邻接矩阵的定义&quot;&gt;&lt;/a&gt;邻接矩阵的定义&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;图的邻接矩阵（Adjacency Matrix）&lt;/strong&gt;存储方式是用两个数
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://wuhongbin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图" scheme="https://wuhongbin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    
    
      <category term="图" scheme="https://wuhongbin.github.io/tags/%E5%9B%BE/"/>
    
      <category term="邻接矩阵" scheme="https://wuhongbin.github.io/tags/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5/"/>
    
  </entry>
  
  <entry>
    <title>图的基本概念 详细总结</title>
    <link href="https://wuhongbin.github.io/2020/06/01/%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/"/>
    <id>https://wuhongbin.github.io/2020/06/01/%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%20%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-01T02:10:43.000Z</published>
    <updated>2020-07-30T10:30:01.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图的定义"><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h1><p>图（Graph）是由顶点 (Vertex) 的 <strong>有穷非空</strong> 集合 和 顶点之间 <strong>边</strong> 的集合组成，通常表示为：G(V, E)  , 其中，G表示一个图，V是图G中顶点的集合，E是图G中边的集合。</p><p>|V|表示图G中顶点的个数，也称为图G的阶；|E| 表示图G中边的条数</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/U7UjGF.png" alt=""></p><blockquote><p>V = {A，B，C，D，E}         |V| = 5</p><p>E = {(A, B), (A, C), (A, E), (B, C), (C, D), (C, E)}      |E| = 6</p></blockquote><p><strong><font color=red>注意：</font></strong>线性表，树都可以为空，但图 <strong>不能为空</strong> (顶点集合V要有穷非空，边集可以是空的)</p><h1 id="图的其它基本概念"><a href="#图的其它基本概念" class="headerlink" title="图的其它基本概念"></a>图的其它基本概念</h1><h2 id="无向图-amp-有向图"><a href="#无向图-amp-有向图" class="headerlink" title="无向图 &amp; 有向图"></a>无向图 &amp; 有向图</h2><p><strong>无向边：</strong>若顶点Vi到Vj之间的边没有方向，则称 这条边为<strong>无向边(Edge)</strong>，用无序偶(Vi，Vj）来表 示。</p><p><strong>有向边：</strong>若从顶点Vi到Vj的边有方向，则称这条边为 <strong>有向边</strong>，也称为 <strong>弧（Arc）</strong>，用有序偶&lt;Vi，Vj&gt;来表示 ，Vi称为<strong>弧尾</strong>，Vj称为<strong>弧头</strong>。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/U7s4uF.png" alt=""></p><h2 id="简单图-amp-多重图"><a href="#简单图-amp-多重图" class="headerlink" title="简单图 &amp; 多重图"></a>简单图 &amp; 多重图</h2><p><strong>简单图：</strong>在图结构中，若不存在顶点到其自身的 边，且同一条边不重复出现，则称这样的图为简单图。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/U7sfjU.png" alt=""></p><h2 id="完全图"><a href="#完全图" class="headerlink" title="完全图"></a>完全图</h2><p><strong>无向完全图：</strong>在无向图中，如果任意两个顶点之间都存在边，则称该图为无向完全图。含有n个顶 点的无向完全图有n*(n-1)/2条边。</p><p><strong>有向完全图：</strong>在有向图中，如果任意两个顶点之间都存在方向互为相反的两条弧，则称该图为有向完全图。含有n个顶点的有向完全图有n*(n-1) 条边。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/U7R4u6.png" alt=""></p><h2 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h2><p>设有两个图G =（V，E) 和 G’ =（V’，E‘），若V’是V的子集，且E‘是E的子集， 则称G’为G的 <strong>子图</strong>，且若V（G）= V（G’）则称 G’ 为 G的 <strong>生成子图</strong></p><blockquote><p><strong>子图</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/UH99dU.png" alt=""></p><blockquote><p><strong>生成子图</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/UH9CoF.png" alt=""></p><blockquote><p><strong>子图</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/UH9ii4.png" alt=""></p><blockquote><p><strong>子图</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/UHpzLV.png" alt=""></p><blockquote><p><strong>不是子图</strong>，因为它就不是图</p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/UH9pZT.png" alt=""></p><h2 id="连通图-amp-强连通图"><a href="#连通图-amp-强连通图" class="headerlink" title="连通图 &amp; 强连通图"></a>连通图 &amp; 强连通图</h2><p><strong>连通图：</strong>在无向图G中，如果从顶点V1到顶点V2有路径， 则称V1和V2是连通的，如果对于图中任意两个顶 点Vi和Vj都是连通的，则称G是连通图 (ConnectedGraph)</p><p><strong>连通分量：</strong>无向图中的极大连通子图称为连通分量。 </p><blockquote><p><strong>注意以下概念：</strong> </p><p>首先要是子图，并且子图是要连通的； </p><p>连通子图含有极大顶点数； </p><p>是有极大顶点数的速通子图包含依附于这些顶点的所 有边。</p></blockquote><p><strong>强连通图：</strong>在有向图G中,如果对于每一对Vi到Vj都存在路径,则 称G是强连通图。 </p><p><strong>强连通分量：</strong>有向图中的极大强连通子图称为有向图的强连通分量。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/UHElH1.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/UHE3Ax.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/UHVTeA.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/UHeENt.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/UHeV4P.png" alt=""></p><blockquote><p><strong><font color=red>结论：</font></strong></p><p>如果原图是一个连通图 (强连通图)，那么它的连通分量 (强连通分量) 与 原图  <strong>一模一样</strong></p><p>如果原图不是一个连通图 (强连通图)，那么它的连通分量 (强连通分量) 会有 <strong>许多个</strong></p></blockquote><h2 id="生成树-amp-生成森林"><a href="#生成树-amp-生成森林" class="headerlink" title="生成树 &amp; 生成森林"></a>生成树 &amp; 生成森林</h2><p><strong>生成树：</strong>连通图包含全部顶点的一个极小连通子图</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/UHK1MT.png" alt=""></p><p><strong>生成森林：</strong>非连通图所有连通分量的生成树组成森林</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/UHKqFs.png" alt=""></p><h2 id="稀疏图-amp-稠密图"><a href="#稀疏图-amp-稠密图" class="headerlink" title="稀疏图 &amp; 稠密图"></a>稀疏图 &amp; 稠密图</h2><p><strong>稀疏图和稠密图：</strong>这里的稀疏和稠密是模糊的概念，都 是相对而言的，通常认为边或弧数小于n*logn(n是顶 点的个数）的图称为稀疏图，反之称为稠密图。 </p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/UHQXrT.png" alt=""></p><h2 id="顶点的度"><a href="#顶点的度" class="headerlink" title="顶点的度"></a>顶点的度</h2><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/UHM6XT.png" alt=""><br><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/UHMgnU.png" alt=""></p><h2 id="权-amp-网"><a href="#权-amp-网" class="headerlink" title="权 &amp; 网"></a>权 &amp; 网</h2><p><strong>权和网：</strong>有些图的边或弧带有与宅相关的数字，这种与图的边或 弧相关的数叫做权(Weight)，带权的图通常称为网 (Network)。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/UHQeCn.png" alt=""></p><h2 id="有向树"><a href="#有向树" class="headerlink" title="有向树"></a>有向树</h2><p><strong>有向树：</strong> 一个顶点的入度为0，其余顶点的入度均为1的有向图</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/UHlRY9.png" alt=""></p><h2 id="路径-amp-路径长度-amp-回路"><a href="#路径-amp-路径长度-amp-回路" class="headerlink" title="路径 &amp; 路径长度 &amp; 回路"></a>路径 &amp; 路径长度 &amp; 回路</h2><p><strong>路径：</strong>图中顶点v到顶点w的顶点序列，序列中顶点不重复的路径称为简单路径。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/UH1Tcq.png" alt=""></p><p><strong>路径长度：</strong>路径上边的数目，若该路径最短则称其为距离。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/UH3N2n.png" alt=""></p><p><strong>回路：</strong>第一个顶点和最后一个顶点相同的路径</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/22/UH3jqf.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;图的定义&quot;&gt;&lt;a href=&quot;#图的定义&quot; class=&quot;headerlink&quot; title=&quot;图的定义&quot;&gt;&lt;/a&gt;图的定义&lt;/h1&gt;&lt;p&gt;图（Graph）是由顶点 (Vertex) 的 &lt;strong&gt;有穷非空&lt;/strong&gt; 集合 和 顶点之间 &lt;stron
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://wuhongbin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图" scheme="https://wuhongbin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    
    
      <category term="图" scheme="https://wuhongbin.github.io/tags/%E5%9B%BE/"/>
    
  </entry>
  
</feed>
